#+TITLE: GNU Emacs Config
#+AUTHOR: Felipe Oliveira (FO)
#+DESCRIPTION: My personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#backup][BACKUP]]
- [[#buffer-move][BUFFER-MOVE]]
- [[#dashboard][DASHBOARD]]
- [[#flycheck-languagetool][FLYCHECK-LANGUAGETOOL]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting the Font Face]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#git-programs][GIT PROGRAMS]]
  - [[#git-time-machine][Git Time Machine]]
  - [[#magit][Magit]]
- [[#graphical-user-interface-tweaks][GRAPHICAL USER INTERFACE TWEAKS]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
- [[#ivy-counsel][IVY (COUNSEL)]]
- [[#minibuffer-escape][MINIBUFFER ESCAPE]]
- [[#modeline][MODELINE]]
- [[#nerd-font-icons][NERD FONT ICONS]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table Of Contents]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#org-download][Org Download]]
  - [[#org-modern][Org Modern]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]
  - [[#org-roam][Org Roam]]
  - [[#org-agenda][Org Agenda]]
  - [[#org-super-agenda][Org Super Agenda]]
- [[#rainbow-delimiters][RAINBOW DELIMITERS]]
- [[#rainbow-mode][RAINBOW MODE]]
- [[#theme][THEME]]
- [[#transparency][TRANSPARENCY]]
- [[#which-key][WHICH-KEY]]

* IMPORTANT PROGRAMS TO LOAD FIRST
** Elpaca Package Manager

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.5)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil
				:files (:defaults (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (call-process "git" nil buffer t "clone"
					 (plist-get order :repo) repo)))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

#+end_src

** Load Evil Mode

#+begin_src emacs-lisp
    ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed.
  (elpaca-wait)

  ;;When installing a package which modifies a form used at the top-level
  ;;(e.g. a package which adds a use-package key word),
  ;;use `elpaca-wait' to block until that package has been installed/configured.
  ;;For example:
  ;;(use-package general :demand t)
  ;;(elpaca-wait)

  ;; Expands to: (elpaca evil (use-package evil :demand t))
  (use-package evil
    :init ;; tweak evil's configuration before loading it
    (setq evil-want-integration t) ;; This is optional since it's already set to t
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-undo-system 'undo-redo)
    (evil-mode))
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))

  ;; Using RETURN to follow links in Org/Evil 
  ;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil))
  ;; Setting RETURN key in org-mode to follow links
    (setq org-return-follows-link  t)

  ;;Turns off elpaca-use-package-mode current declartion
  ;;Note this will cause the declaration to be interpreted immediately (not deferred).
  ;;Useful for configuring built-in emacs features.
  (use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

  ;; Don't install anything. Defer execution of BODY
  ;; (elpaca nil (message "deferred"))
#+end_src

** General Keybindings

#+begin_src emacs-lisp

    (use-package general
      :config
      (general-evil-setup)

      ;; set up 'SPC' as the global leader key
      (general-create-definer fo/leader-keys
	:states '(normal insert visual emacs)
	:keymaps 'override
	:prefix "SPC" ;; set leader
	:global-prefix "M-SPC") ;; access leader in insert mode

      (fo/leader-keys
	"SPC" '(counsel-M-x :wk "Counsel M-x")
	"." '(find-file :wk "Find file")
	"f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
	"f a" '((lambda () (interactive) (find-file "~/org-roam/agenda.org")) :wk "Edit agenda")
	"f d" '(org-download-screenshot :wk "Take screenshot and insert resulting file")
	"f r" '(counsel-recentf :wk "Find recent files")
	"TAB TAB" '(comment-line :wk "Comment lines"))

      (fo/leader-keys
	"b" '(:ignore t :wk "buffer")
	"b b" '(switch-to-buffer :wk "Switch buffer")
	"b i" '(ibuffer :wk "Ibuffer")
	"b k" '(kill-this-buffer :wk "Kill this buffer")
	"b n" '(next-buffer :wk "Next buffer")
	"b ]" '(next-buffer :wk "Next buffer")
	"b p" '(previous-buffer :wk "Previous buffer")
	"b [" '(previous-buffer :wk "Previous buffer")
	"b r" '(revert-buffer :wk "Reload buffer"))

      (fo/leader-keys
	"e" '(:ignore t :wk "Evaluate")
	"e b" '(eval-buffer :wk "Evaluate elisp in buffer")
	"e d" '(eval-defun :wk "Evaluate defun containing or after point")
	"e e" '(eval-expression :wk "Evaluate an elisp expression")
	"e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
	"e r" '(eval-region :wk "Evaluate elisp in region"))

      (fo/leader-keys
	"h" '(:ignore t :wk "Help")
	"h f" '(describe-function :wk "Describe function")
	"h t" '(load-theme :wk "Load theme")
	"h v" '(describe-variable :wk "Describe variable")
	"h r r" '((lambda () (interactive)
		    (load-file "~/.config/emacs/init.el")
		    (ignore (elpaca-process-queues)))
		  :wk "Reload emacs config"))

      (fo/leader-keys
	"m" '(:ignore t :wk "Org")
	"m a" '(org-agenda :wk "Org agenda")
	"m e" '(org-export-dispatch :wk "Org export dispatch")
	"m i" '(org-toggle-item :wk "Org toggle item")
	"m t" '(org-todo :wk "Org todo")
	"m B" '(org-babel-tangle :wk "Org babel tangle")
	"m T" '(org-todo-list :wk "Org todo list"))

      (fo/leader-keys
	"m b" '(:ignore t :wk "Tables")
	"m b -" '(org-table-insert-hline :wk "Insert hline in table"))

      (fo/leader-keys
	"m d" '(:ignore t :wk "Date/deadline")
	"m d t" '(org-time-stamp :wk "Org time stamp"))

    (fo/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t g" '(flycheck-mode :wk "Toggle Flycheck Mode")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t t" '(visual-line-mode :wk "Toggle truncated lines"))

  (fo/leader-keys
    "w" '(:ignore t :wk "Windows")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right"))
    )

#+end_src

* ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.
  
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* BACKUP
By default, Emacs creates automatic backups of files in their original directories, such “file.el” and the backup “file.el~”. This leads to a lot of clutter, so let’s tell Emacs to put all backups that it creates in the =TRASH= directory.

#+begin_src emacs-lisp
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))

#+end_src

* BUFFER-MOVE
Creating some functions to allow us to easily move windows (splits) around.  The following block of code was taken from buffer-move.el found on the EmacsWiki:
https://www.emacswiki.org/emacs/buffer-move.el

#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src


* DASHBOARD
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
    (setq dashboard-startup-banner "/home/felipe/.config/emacs/images/emacs-dash.png")
    (setq dashboard-center-content t)
    (setq dashboard-icon-type 'all-the-icons)  ; use `all-the-icons' package
    (setq dashboard-items '((recents . 5)
                            (agenda . 5)
                            (bookmarks . 3)
                            (projects . 3)
                            (registers . 3)))
   :config
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book")))
   (dashboard-setup-startup-hook))
#+end_src

* FLYCHECK-LANGUAGETOOL

#+begin_src emacs-lisp
(use-package flycheck-languagetool
  :ensure t
  :hook (text-mode . flycheck-languagetool-setup)
  :init
  (setq flycheck-languagetool-server-jar "~/Applications/LanguageTool-6.4/languagetool-server.jar"))

#+end_src

* FONTS
Defining the various fonts that Emacs will use

** Setting the Font Face
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
    :font "JetBrains Mono"
    :height 110
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :font "Ubuntu"
    :height 120
    :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
    :font "JetBrains Mono"
    :height 110
    :weight 'medium)
  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but no emacs.
  ;; Your font must have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
    :slant 'italic)

  ;; This sets the default font on all graphical frames created after restarting Emacs
  (add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))

  ;; Uncommnet the following line if linespacing needs adjusting.
  (setq-default line-spacing 0.12)
#+end_src

** Zooming In/Out
You can use the binding CTRL plus =/+ for zooming in/out. You can also use CTRL plus the mouse wheel for zooming in/out.

#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* GIT PROGRAMS
** Git Time Machine
[[https://github.com/emacsmirror/git-timemachine][git-timemachine]] is a program that allows you to move backwards and forwards through a file's commits.  'SPC g t' will open the time machine on a file if it is in a git repo.  Then, while in normal mode, you can use 'CTRL-j' and 'CTRL-k' to move backwards and forwards through the commits.

#+begin_src emacs-lisp
(use-package git-timemachine
  :after git-timemachine
  :hook (evil-normalize-keymaps . git-timemachine-hook)
  :config
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision)
)
#+end_src

** Magit
[[https://magit.vc/manual/][Magit]] is a full-featured git client for Emacs.
#+begin_src emacs-lisp
(use-package magit)
#+end_src

* GRAPHICAL USER INTERFACE TWEAKS
Let's make GNU Emacs look a little better.

** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src
* IVY (COUNSEL)
+ Ivy, a generic completion mechanism for Emacs.
+ Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
+ Ivy-rich allows us to add descriptions alongside the commands in M-x.

#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :config (counsel-mode))
  
  (use-package ivy
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))

#+end_src

* MINIBUFFER ESCAPE
By default, Emacs requires you to hit ESC three times to escape quit the minibuffer.  

#+begin_src emacs-lisp
(global-set-key [escape] 'keyboard-escape-quit)
#+end_src

* MODELINE
The modeline is the bottom status bar  that appears in Emacs windows. While you can create your own custom modeline, why go to the trouble when Doom Emacs already has a nice modeline package available. For more information on what is available to configure in the Doom modline, check out: [[https://github.com/seagle0128/doom-modeline][Doom Modeline]].

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 25
        doom-modeline-bar-width 5
        doom-modeline-persp-name t
        doom-modeline-persp-icon t))
#+end_src

* NERD FONT ICONS

#+begin_src emacs-lisp
(use-package nerd-icons
  ;; :custom
  ;; The Nerd Font you want to use in GUI
  ;; "Symbols Nerd Font Mono" is the default and is recommended
  ;; but you can use any other Nerd Font if you want
  ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
  )

#+end_src

* ORG MODE
** Enabling Table Of Contents
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

# ** Enabling Org Bullets
# Org-bullets gives us attractive bullets rather than asterisks.

# #+begin_src emacs-lisp
#   (add-hook 'org-mode-hook 'org-indent-mode)
#   (use-package org-bullets)
#   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
# #+end_src

** Disable Electric Indent
Org mode source blocks have some really weird and annoying default indentation behavior. I think this has to do with electric-indent-mode, which is turned on by default in Emacs. So let's turn it OFF!

#+begin_src emacs-lisp
(electric-indent-mode -1)
#+end_src

** Org Download
#+begin_src emacs-lisp
  (use-package org-download
    :config
    (setq-default org-download-image-dir "~/org-roams/images")
    (setq-default org-download-screenshot-method "xfce4-screenshooter -r -s %s"))
#+end_src
** Org Modern

#+begin_src emacs-lisp
  (use-package org-modern
    :config
    (setq org-modern-star 'replace)
    :hook (org-mode . global-org-modern-mode))
#+end_src

** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |


#+begin_src emacs-lisp 
(require 'org-tempo)
#+end_src

** Org Roam

#+begin_src emacs-lisp
  (use-package org-roam
  :ensure t
  :custom
  (org-roam-directory "~/org-roam")
  (org-roam-completion-everywhere t)
  :config
    (setq org-roam-dailies-capture-templates
      '(("d" "default" entry
         "* Morning\n** Thoughts\n%?\n** Affirmation\n\n** Objectives\n"
         :target (file+head "%<%Y-%m-%d>.org"
                            "#+title: %<%Y-%m-%d>\n\n"))))
      (fo/leader-keys
	  "n" '(:ignore t :wk "Org Roam")
	  "n Y" '(org-roam-dailies-capture-yesterday :wk "Capture Yesterday")
	  "n T" '(org-roam-dailies-capture-tomorrow :wk "Capture Tomorrow")
	  "n d" '(org-roam-dailies-map :wk "Daily Map")
	  "n l" '(org-roam-buffer-toggle :wk "Toggle buffer")
	  "n f" '(org-roam-node-find :wk "Node find")
	  "n i" '(org-roam-node-insert :wk "Node Insert"))
  (org-roam-setup)
  (require 'org-roam-dailies) ;; Ensure the keymap is available
  (org-roam-db-autosync-mode))
#+end_src

*** Org Roam UI

#+begin_src emacs-lisp
  (use-package websocket
    :after org-roam)

  (use-package org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
	  org-roam-ui-follow t
	  org-roam-ui-update-on-save t
	  org-roam-ui-open-on-start t)
  )
#+end_src

** Org Agenda
#+begin_src emacs-lisp
  (setq org-agenda-files '("~/org-roam/agenda.org"))
#+end_src

** Org Super Agenda

#+begin_src emacs-lisp
  (use-package org-super-agenda)

  ;; (let ((org-super-agenda-groups
  ;;      '(;; Each group has an implicit boolean OR operator between its selectors.
  ;;        (:name "Today"  ; Optionally specify section name
  ;;              :time-grid t  ; Items that appear on the time grid
  ;;              :todo "TODAY")  ; Items that have this TODO keyword
  ;;       (:name "Important"
  ;;              ;; Single arguments given alone
  ;;              :tag "bills"
  ;;              :priority "A")
  ;;       ;; Set order of multiple groups at once
  ;;       (:order-multi (2 (:name "Shopping in town"
  ;;                               ;; Boolean AND group matches items that match all subgroups
  ;;                               :and (:tag "shopping" :tag "@town"))
  ;;                        (:name "Food-related"
  ;;                               ;; Multiple args given in list with implicit OR
  ;;                               :tag ("food" "dinner"))
  ;;                        (:name "Personal"
  ;;                               :habit t
  ;;                               :tag "personal")
  ;;                        (:name "Space-related (non-moon-or-planet-related)"
  ;;                               ;; Regexps match case-insensitively on the entire entry
  ;;                               :and (:regexp ("space" "NASA")
  ;;                                             ;; Boolean NOT also has implicit OR between selectors
  ;;                                             :not (:regexp "moon" :tag "planet")))))
  ;;       ;; Groups supply their own section names when none are given
  ;;       (:todo "WAITING" :order 8)  ; Set order of this section
  ;;       (:todo ("SOMEDAY" "TO-READ" "CHECK" "TO-WATCH" "WATCHING")
  ;;              ;; Show this group at the end of the agenda (since it has the
  ;;              ;; highest number). If you specified this group last, items
  ;;              ;; with these todo keywords that e.g. have priority A would be
  ;;              ;; displayed in that group instead, because items are grouped
  ;;              ;; out in the order the groups are listed.
  ;;              :order 9)
  ;;       (:priority<= "B"
  ;;                    ;; Show this section after "Today" and "Important", because
  ;;                    ;; their order is unspecified, defaulting to 0. Sections
  ;;                    ;; are displayed lowest-number-first.
  ;;                    :order 1)
  ;;       ;; After the last group, the agenda will display items that didn't
  ;;       ;; match any of these groups, with the default order position of 99
  ;;       )))
  ;;(org-agenda nil "a"))
#+end_src

* RAINBOW DELIMITERS
Adding rainbow coloring to parentheses.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
         (clojure-mode . rainbow-delimiters-mode)))

#+end_src

* RAINBOW MODE
Display the actual color as a background for any hex color value (ex. #ffffff).  The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.  

#+begin_src emacs-lisp
(use-package rainbow-mode
  :hook 
  ((org-mode prog-mode) . rainbow-mode))
#+end_src

* THEME
The first of the two lines below designates the directory where will place all of our themes.  The second line loads our chosen theme which is *foliveira*, a theme that I created with the help of the [[https://emacsfodder.github.io/emacs-theme-editor/][Emacs Theme Editor]].

#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
    (load-theme 'doom-one t)
    (doom-themes-org-config))
#+end_src

* TRANSPARENCY
With Emacs version 29, true transparency has been added.

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(alpha-background . 95))

#+end_src

* WHICH-KEY
#+begin_src emacs-lisp
  (use-package which-key
    :init
      (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil
	  which-key-separator " → "))
#+end_src
