#+title: My Emacs Config
#+AUTHOR: Felipe Oliveira (fcvo)
#+DESCRIPTION: My personal Emacs config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of Contents :toc:
- [[#basic-setup][Basic setup]]
- [[#elpaca-package-manager][Elpaca Package Manager]]
- [[#evil-mode][Evil Mode]]
- [[#which-key][Which-Key]]
- [[#general-keybindings][General Keybindings]]
- [[#ui-configuration][UI Configuration]]
  - [[#font-configuration][Font Configuration]]
  - [[#color-theme][Color Theme]]
  - [[#nerd-icons][Nerd Icons]]
  - [[#all-the-icons][All The Icons]]
  - [[#modeline][Modeline]]
  - [[#show-invisibles][Show Invisibles]]
- [[#backup][BACKUP]]
- [[#org-mode][Org Mode]]
  - [[#basic-config][Basic Config]]
  - [[#table-of-contents][Table Of Contents]]
  - [[#org-modern][Org Modern]]
  - [[#center-org-buffers][Center Org Buffers]]
  - [[#org-agenda][Org Agenda]]
  - [[#habits][Habits]]
  - [[#refiling-and-archiving][Refiling and Archiving]]
  - [[#capture][Capture]]
  - [[#org-roam][Org Roam]]
- [[#completion-system][Completion System]]
  - [[#vertico][Vertico]]
  - [[#marginalia][Marginalia]]
  - [[#orderless][Orderless]]
  - [[#consult][Consult]]
  - [[#embark][Embark]]
- [[#posframe][Posframe]]

* Basic setup

#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (recentf-mode 1)

  (defvar my-config-path
    (expand-file-name "config.org" user-emacs-directory))
#+end_src

* Elpaca Package Manager

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.11)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1 :inherit ignore
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (<= emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                    ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                    ,@(when-let* ((depth (plist-get order :depth)))
                                                        (list (format "--depth=%d" depth) "--no-single-branch"))
                                                    ,(plist-get order :repo) ,repo))))
                    ((zerop (call-process "git" nil buffer t "checkout"
                                          (or (plist-get order :ref) "--"))))
                    (emacs (concat invocation-directory invocation-name))
                    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                          "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                    ((require 'elpaca))
                    ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode))

#+end_src

* Evil Mode

Because vim is awesome!

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :demand t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode 1)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

  (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))

#+end_src

* Which-Key

#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode)
    :config
    (setq which-key-idle-delay 0.3))

  (setq which-key-min-display-lines 10)
#+end_src

* General Keybindings

#+begin_src emacs-lisp
  (use-package general
    :ensure t

    :config
    (general-evil-setup)

    ;; set SPC as the global leader key
    (general-create-definer fcvo/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "M-SPC") ;; access leader in insert mode

    (fcvo/leader-keys
      "SPC" '(execute-extended-command :wk "M-x")
      "." '(find-file :wk "Find file")
      "f c" '((lambda () (interactive) (find-file my-config-path)) :wk "Edit emacs config")
      "f a" '((lambda () (interactive) (find-file "~/org/agenda.org")) :wk "Edit agenda")
      "f i" '((lambda () (interactive) (find-file "~/org/inbox.org")) :wk "Edit inbox")
      "f h" '((lambda () (interactive) (find-file "~/org/habits.org")) :wk "Edit habits")
      "f r" '(consult-recent-file :wk "Find recent files")))
#+end_src

* UI Configuration

This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Font Configuration

#+begin_src emacs-lisp
  (defvar fcvo/default-font-size 140)
  (defvar fcvo/default-variable-font-size 140)

  (set-face-attribute 'default nil :font "JetBrains Mono" :height fcvo/default-font-size :weight 'medium)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "JetBrains Mono" :height fcvo/default-font-size :weight 'medium)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Ubuntu" :height fcvo/default-font-size :weight 'medium)

  (set-face-attribute 'font-lock-comment-face nil
      :slant 'italic)

  (set-face-attribute 'font-lock-keyword-face nil
      :slant 'italic)
#+end_src

** Color Theme

I gave up for themes, let's go with [[https://github.com/hlissner/emacs-doom-themes][doom-themes]].

#+begin_src emacs-lisp

  (use-package doom-themes
    :ensure t
    :custom
    ;; Global settings (defaults)
    (doom-themes-enable-bold t)   ; if nil, bold is universally disabled
    (doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;; for treemacs users
    (doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    :config
    (load-theme 'doom-tokyo-night t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (nerd-icons must be installed!)
    ;; (doom-themes-neotree-config)
    ;; or for treemacs users
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

#+end_src

** Nerd Icons

#+begin_src emacs-lisp

  (use-package nerd-icons
    :ensure t
    ;; :custom
    ;; (nerd-icons-font-family "Hack Nerd Font Mono")
  )

#+end_src

** All The Icons

This is an icon set that can be used with modeline, dasboard, dired, ibuffer and other Emacs programs.

#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

** Modeline

The modeline is the bottom status bar that appears in Emacs windows. While you can create your own custom modeline, why go to the trouble when Doom Emacs already has a nice modeline package available. For more information o what is available to configure in the DOom modeline, check out: [[https://github.com/seagle0128/doom-modeline][Doom Modeline]]

#+begin_src emacs-lisp

  (use-package doom-modeline
    :ensure t
    :init
    (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 35
          doom-modeline-bar-width 5
          doom-modeline-persp-name t
          doom-modeline-persp-icon t))

#+end_src

** Show Invisibles

#+begin_src emacs-lisp

  (setq whitespace-style '(face trailing tab-mark))
  (setq whitespace-display-mappings
        '((space-mark ?\  [?\u00B7] [?.])       ;; space -> ·
          (tab-mark ?\t [?\u00BB ?\t] [?\\ ?\t]))) ;; tab -> » or \t
  (global-whitespace-mode 1)

#+end_src

* BACKUP

#+begin_src emacs-lisp

  (setq make-backup-files nil  ; no backup~ files
    auto-save-default nil      ; no #autosave# files
    create-lockfiles nil)      ; no .#lock files

#+end_src

* Org Mode

** Basic Config

This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.

#+begin_src emacs-lisp
    (global-set-key (kbd "C-c l") #'org-store-link)
    (global-set-key (kbd "C-c a") #'org-agenda)
    (global-set-key (kbd "C-c c") #'org-capture)

    (defun fcvo/org-mode-setup ()
      ;;(org-indent-mode)
      (visual-line-mode 1))

    (use-package org
      :hook (org-mode . fcvo/org-mode-setup)
      :config
      (setq org-ellipsis " ▾")
      (setq org-return-follows-link 1))
#+end_src

** Table Of Contents

#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :init (add-hook 'org-mode-hook 'toc-org-mode))
#+end_src

** Org Modern

#+begin_src emacs-lisp
  (use-package org-modern
    :ensure t
    :config
    (add-hook 'org-mode-hook #'org-modern-mode)
    (add-hook 'org-agenda-finalize-hook #'org-modern-agenda))
#+end_src

** Center Org Buffers

#+begin_src emacs-lisp
  (defun fcvo/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
  	visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :ensure t
    :hook (org-mode . fcvo/org-mode-visual-fill))
#+end_src

** Org Agenda

#+begin_src emacs-lisp
  (setq org-agenda-files '("~/org/teaching-calendar.org"
  			 "~/org/teaching.org"
  			 "~/org/initiatives.org"
  			 "~/org/habits.org"
  			 "~/org/inbox.org"))
#+end_src

** Habits

Tracking my habits

#+begin_src emacs-lisp
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)
#+end_src

** Refiling and Archiving

#+begin_src emacs-lisp
  (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
  #+end_src

*** TODO setup

** Capture

*** TODO setup

** Org Roam

My second brain

#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :custom
    (setq org-roam-directory (file-truename "~/org-roam"))
    :config
    (fcvo/leader-keys
      "n" '(:ignore t :wk "Org Roam")
      "n f" '(org-roam-node-find :wk "Node find")
      "n i" '(org-roam-node-insert :wk "Node insert")
      "n l" '(org-roam-buffer-toggle :wk "Toggle buffer"))
    (org-roam-setup)
    (org-roam-db-autosync-mode)
  )
#+end_src

*** Org Roam UI

#+begin_src emacs-lisp
  (use-package websocket
    :ensure t
    :after org-roam)

  (use-package org-roam-ui
    :ensure t
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t)
  )
#+end_src

* Completion System

A powerful modular minibuffer completion system using Vertico, Orderless, Marginalia, Consult, and Embark.

** Vertico

#+begin_src emacs-lisp
  ;; Enable Vertico.
  (use-package vertico
    :ensure t
    ;; :custom
    ;; (vertico-scroll-margin 0) ;; Different scroll margin
    ;; (vertico-count 20) ;; Show more candidates
    ;; (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
    ;; (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
    :init
    (vertico-mode))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; Emacs minibuffer configurations.
  (use-package emacs
    :custom
    ;; Enable context menu. `vertico-multiform-mode' adds a menu in the minibuffer
    ;; to switch display modes.
    (context-menu-mode t)
    ;; Support opening new minibuffers from inside existing minibuffers.
    (enable-recursive-minibuffers t)
    ;; Hide commands in M-x which do not work in the current mode.  Vertico
    ;; commands are hidden in normal buffers. This setting is useful beyond
    ;; Vertico.
    (read-extended-command-predicate #'command-completion-default-include-p)
    ;; Do not allow the cursor in the minibuffer prompt
    (minibuffer-prompt-properties
     '(read-only t cursor-intangible t face minibuffer-prompt)))
#+end_src

** Marginalia

#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :after vertico
    :bind (:map minibuffer-local-map
  	    ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src

** Orderless

A completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order.

#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch))
    ;; (orderless-component-separator #'orderless-escapable-split-on-space)
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
 #+end_src

** Consult

#+begin_src emacs-lisp
  (use-package consult
    :ensure t
    :bind (
  	 ("C-c b" . consult-buffer))
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :init
    (advice-add #'register-preview :override #'consult-register-window)
    (setq register-preview-delay 0.5)
    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
    :config
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
    consult-theme :preview-key '(:debounce 0.2 any)
    consult-ripgrep consult-git-grep consult-grep consult-man
    consult-bookmark consult-recent-file consult-xref
    consult--source-bookmark consult--source-file-register
    consult--source-recent-file consult--source-project-recent-file
    ;; :preview-key "M-."
    :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
  )
#+end_src

** Embark

right click as command

* Posframe

    vertico-posframe - for vertico

    which-key-posframe - for which-key

    transient-posframe - for all transient commands, e.g., in magit or in casual-suite
